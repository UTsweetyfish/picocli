From: Miroslav Kravec <kravec.miroslav@gmail.com>
Date: Sat, 26 Jan 2019 19:31:42 +0100
Subject: Adjust build to work without asciidoctor and bintray,
 and with default java

---
 build.gradle                      | 61 ---------------------------------------
 picocli-codegen/build.gradle      | 35 +---------------------
 picocli-shell-jline2/build.gradle | 35 +---------------------
 picocli-shell-jline3/build.gradle | 34 ----------------------
 4 files changed, 2 insertions(+), 163 deletions(-)

diff --git a/build.gradle b/build.gradle
index 242919d..eeb0222 100644
--- a/build.gradle
+++ b/build.gradle
@@ -2,21 +2,8 @@ group 'info.picocli'
 description 'Java command line parser with both an annotations API and a programmatic API. Usage help with ANSI styles and colors. Autocomplete. Nested subcommands. Easily included as source to avoid adding a dependency.'
 version "$projectVersion"
 
-buildscript {
-    repositories {
-        jcenter()
-    }
-
-    dependencies {
-        classpath "org.asciidoctor:asciidoctor-gradle-plugin:$asciidoctorGradlePluginVersion"
-        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:$gradleBintrayPluginVersion"
-    }
-}
-
-apply plugin: 'org.asciidoctor.convert'
 apply plugin: 'distribution'
 apply plugin: 'maven-publish'
-apply plugin: 'com.jfrog.bintray'
 
 allprojects {
     apply plugin: 'groovy'
@@ -157,19 +144,6 @@ jar {
 }
 
 javadoc.options.overview = "src/main/java/overview.html"
-javadoc.dependsOn('asciidoctor')
-asciidoctor {
-    sourceDir = file('docs')
-    outputDir = file('build/docs')
-    logDocuments = true
-}
-// jacoco 0.8.2 does not work with Java 13; gradle 4.x has no JavaVersion enum value for Java 12
-if (org.gradle.api.JavaVersion.current().isJava11Compatible()) {
-    project.logger.lifecycle("skipping jacoco test for Java version ${org.gradle.api.JavaVersion.current()}")
-} else {
-    project.logger.lifecycle("applying jacoco build file for Java version ${org.gradle.api.JavaVersion.current()}")
-    apply from: "gradle/jacoco.gradle"
-}
 task bumpReadmeVersion {
     doLast {
         // README.md
@@ -240,41 +214,6 @@ ext {
     bintrayWebsiteUrl = 'http://picocli.info'
     bintrayLabels     = ['cli', 'cli framework', 'java', 'command line', 'ergonomic', 'library', 'parser', 'ansi', 'colors', 'annotations', 'reflection', 'usage', 'help', 'customizable', 'stand-alone application', 'main method', 'picocli']
 }
-bintray {
-    user = bintrayUsername
-    key  = bintrayApiKey
-    publications = ['MyPublication']
-    dryRun   = bintrayDryRun //[Default: false] Whether to run this as dry-run, without deploying
-    publish  = bintrayPublish //[Default: false] Whether version should be auto published after an upload    
-    override = bintrayOverride //[Default: false] Whether to override version artifacts already published    
-    //Package configuration. The plugin will use the repo and name properties to check if the package already exists. In that case, there's no need to configure the other package properties (like userOrg, desc, etc).
-    pkg {
-        repo     = 'picocli'
-        name     = bintrayPackage
-        userOrg  = 'remkop'
-        licenses = ['Apache-2.0']
-        desc = description
-        websiteUrl = bintrayWebsiteUrl
-        issueTrackerUrl = 'https://github.com/remkop/picocli/issues'
-        vcsUrl   = 'https://github.com/remkop/picocli.git'
-        labels = bintrayLabels
-        publicDownloadNumbers = false
-        githubRepo = 'remkop/picocli' //Optional Github repository
-        githubReleaseNotesFile = 'RELEASE-NOTES.md' //Optional Github readme file
-        version {
-            name     = "$projectVersion"
-            desc     = description
-            released = new Date()
-            vcsTag   = "v$projectVersion"
-            mavenCentralSync {
-                sync = mavenOssSync //[Default: true] Determines whether to sync the version to Maven Central.
-                user = mavenOssUser //OSS user token: mandatory
-                password = mavenOssPassword //OSS user password: mandatory
-                close = '1' //Optional property. By default the staging repository is closed and artifacts are released to Maven Central. You can optionally turn this behaviour off (by puting 0 as value) and release the version manually.
-            }
-        }
-    }
-}
 publishing {
     publications {
         MyPublication(MavenPublication) {
diff --git a/picocli-codegen/build.gradle b/picocli-codegen/build.gradle
index 061f4f9..abcc61a 100644
--- a/picocli-codegen/build.gradle
+++ b/picocli-codegen/build.gradle
@@ -2,12 +2,12 @@ plugins {
     id 'java'
     id 'distribution'
     id 'maven-publish'
-    id 'com.jfrog.bintray'
 }
 
 group 'info.picocli'
 description 'Picocli Code Generation - Tools to generate documentation, configuration, source code and other files from a picocli model.'
 version "$projectVersion"
+sourceCompatibility = 1.6
 
 dependencies {
     compile rootProject
@@ -30,39 +30,6 @@ ext {
     bintrayWebsiteUrl = 'https://github.com/remkop/picocli/tree/master/picocli-codegen'
     bintrayLabels     = ['cli', 'cli framework', 'command line', 'codegen', 'picocli']
 }
-bintray {
-    user = bintrayUsername
-    key  = bintrayApiKey
-    publications = ['MyPublication']
-    dryRun   = bintrayDryRun //[Default: false] Whether to run this as dry-run, without deploying
-    publish  = bintrayPublish //[Default: false] Whether version should be auto published after an upload    
-    override = bintrayOverride //[Default: false] Whether to override version artifacts already published    
-    //Package configuration. The plugin will use the repo and name properties to check if the package already exists. In that case, there's no need to configure the other package properties (like userOrg, desc, etc).
-    pkg {
-        repo     = 'picocli'
-        name     = bintrayPackage
-        userOrg  = 'remkop'
-        licenses = ['Apache-2.0']
-        desc = description
-        websiteUrl = bintrayWebsiteUrl
-        issueTrackerUrl = 'https://github.com/remkop/picocli/issues'
-        vcsUrl   = 'https://github.com/remkop/picocli.git'
-        labels = bintrayLabels
-        publicDownloadNumbers = false
-        version {
-            name     = "$projectVersion"
-            desc     = description
-            released = new Date()
-            vcsTag   = "v$projectVersion"
-            mavenCentralSync {
-                sync = mavenOssSync //[Default: true] Determines whether to sync the version to Maven Central.
-                user = mavenOssUser //OSS user token: mandatory
-                password = mavenOssPassword //OSS user password: mandatory
-                close = '1' //Optional property. By default the staging repository is closed and artifacts are released to Maven Central. You can optionally turn this behaviour off (by puting 0 as value) and release the version manually.
-            }
-        }
-    }
-}
 publishing {
     publications {
         MyPublication(MavenPublication) {
diff --git a/picocli-shell-jline2/build.gradle b/picocli-shell-jline2/build.gradle
index 63245e4..68dac91 100644
--- a/picocli-shell-jline2/build.gradle
+++ b/picocli-shell-jline2/build.gradle
@@ -2,12 +2,12 @@ plugins {
     id 'java'
     id 'distribution'
     id 'maven-publish'
-    id 'com.jfrog.bintray'
 }
 
 group 'info.picocli'
 description 'Picocli Shell JLine2 - easily build interactive shell applications with JLine 2 and picocli.'
 version "$projectVersion"
+sourceCompatibility = 1.6
 
 dependencies {
     compile rootProject
@@ -32,39 +32,6 @@ ext {
     bintrayWebsiteUrl = 'https://github.com/remkop/picocli/tree/master/picocli-shell-jline2'
     bintrayLabels     = ['cli', 'interactive', 'commandline', 'shell', 'picocli', 'jline']
 }
-bintray {
-    user = bintrayUsername
-    key  = bintrayApiKey
-    publications = ['MyPublication']
-    dryRun   = bintrayDryRun //[Default: false] Whether to run this as dry-run, without deploying
-    publish  = bintrayPublish //[Default: false] Whether version should be auto published after an upload    
-    override = bintrayOverride //[Default: false] Whether to override version artifacts already published    
-    //Package configuration. The plugin will use the repo and name properties to check if the package already exists. In that case, there's no need to configure the other package properties (like userOrg, desc, etc).
-    pkg {
-        repo     = 'picocli'
-        name     = bintrayPackage
-        userOrg  = 'remkop'
-        licenses = ['Apache-2.0']
-        desc = description
-        websiteUrl = bintrayWebsiteUrl
-        issueTrackerUrl = 'https://github.com/remkop/picocli/issues'
-        vcsUrl   = 'https://github.com/remkop/picocli.git'
-        labels = bintrayLabels
-        publicDownloadNumbers = false
-        version {
-            name     = "$projectVersion"
-            desc     = description
-            released = new Date()
-            vcsTag   = "v$projectVersion"
-            mavenCentralSync {
-                sync = mavenOssSync //[Default: true] Determines whether to sync the version to Maven Central.
-                user = mavenOssUser //OSS user token: mandatory
-                password = mavenOssPassword //OSS user password: mandatory
-                close = '1' //Optional property. By default the staging repository is closed and artifacts are released to Maven Central. You can optionally turn this behaviour off (by puting 0 as value) and release the version manually.
-            }
-        }
-    }
-}
 publishing {
     publications {
         MyPublication(MavenPublication) {
diff --git a/picocli-shell-jline3/build.gradle b/picocli-shell-jline3/build.gradle
index 79b0c56..d46585d 100644
--- a/picocli-shell-jline3/build.gradle
+++ b/picocli-shell-jline3/build.gradle
@@ -2,7 +2,6 @@ plugins {
     id 'java'
     id 'distribution'
     id 'maven-publish'
-    id 'com.jfrog.bintray'
 }
 
 group 'info.picocli'
@@ -32,39 +31,6 @@ ext {
     bintrayWebsiteUrl = 'https://github.com/remkop/picocli/tree/master/picocli-shell-jline3'
     bintrayLabels     = ['cli', 'interactive', 'commandline', 'shell', 'picocli', 'jline']
 }
-bintray {
-    user = bintrayUsername
-    key  = bintrayApiKey
-    publications = ['MyPublication']
-    dryRun   = bintrayDryRun //[Default: false] Whether to run this as dry-run, without deploying
-    publish  = bintrayPublish //[Default: false] Whether version should be auto published after an upload    
-    override = bintrayOverride //[Default: false] Whether to override version artifacts already published    
-    //Package configuration. The plugin will use the repo and name properties to check if the package already exists. In that case, there's no need to configure the other package properties (like userOrg, desc, etc).
-    pkg {
-        repo     = 'picocli'
-        name     = bintrayPackage
-        userOrg  = 'remkop'
-        licenses = ['Apache-2.0']
-        desc = description
-        websiteUrl = bintrayWebsiteUrl
-        issueTrackerUrl = 'https://github.com/remkop/picocli/issues'
-        vcsUrl   = 'https://github.com/remkop/picocli.git'
-        labels = bintrayLabels
-        publicDownloadNumbers = false
-        version {
-            name     = "$projectVersion"
-            desc     = description
-            released = new Date()
-            vcsTag   = "v$projectVersion"
-            mavenCentralSync {
-                sync = mavenOssSync //[Default: true] Determines whether to sync the version to Maven Central.
-                user = mavenOssUser //OSS user token: mandatory
-                password = mavenOssPassword //OSS user password: mandatory
-                close = '1' //Optional property. By default the staging repository is closed and artifacts are released to Maven Central. You can optionally turn this behaviour off (by puting 0 as value) and release the version manually.
-            }
-        }
-    }
-}
 publishing {
     publications {
         MyPublication(MavenPublication) {
